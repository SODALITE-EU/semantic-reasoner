tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - modules/openstack/openstack_vm.yaml
  - modules/docker/docker_host.yaml
  - modules/docker/docker_network.yaml
  - modules/docker/docker_registry.yaml
  - modules/docker/docker_component.yaml

topology_template:

  inputs:  
    docker-registry-ip:  
      type: string 
    ssh-key-name:  
      type: string 
    image-name:  
      type: string 
    vm-name:  
      type: string 
    openstack-network-name:  
      type: string 
    security-groups:  
      type: string    
    flavor-name:  
      type: string                   
    docker-network: 
      type: string
    dockerhub-user:
      type: string
      default: ""      
    dockerhub-pass: 
      type: string
      default: "" 
    docker-public-registry-url: 
      type: string
      default: ""
    docker-private-registry-url: 
      type: string
      default: ""
    docker-registry-cert-country-name:
      type: string
      default: ""
    docker-registry-cert-organization-name: 
      type: string
      default: ""
    docker-registry-cert-email-address: 
      type: string
      default: ""
    identity_file:
      type: string    
    reasoner_env:
      type: map        
    toscasmells_env:
      type: map        

  node_templates: 

    security-rules-sodalite:  
      type: sodalite.nodes.OpenStack.SecurityRules 
      properties:  
        ports:  
          component_ports:  
            port_range_max: 8085 
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 8080 
            protocol: tcp 
          http_port:  
            port_range_min: 80 
            port_range_max: 80 
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
          5000_ports:  
            port_range_min: 5000
            port_range_max: 5007
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0
          https_port:
            port_range_min: 443
            port_range_max: 444
            protocol: tcp
            remote_ip_prefix: 0.0.0.0/0            
        group_name:  sodalite-uc 
        group_description:  Sodalite UC security group     

    security-rules-graphdb:  
      type: sodalite.nodes.OpenStack.SecurityRules 
      properties:  
        ports:  
          https_port:
            port_range_min: 7200
            port_range_max: 7200
            protocol: tcp
            remote_ip_prefix: 0.0.0.0/0            
        group_name:  sodalite-graphdb
        group_description:  Sodalite graph db rule     

    sodalite-vm:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        name: { get_input: vm-name }
        key_name:         { get_input: ssh-key-name } 
        image:            { get_input: image-name }
        network:          { get_input: openstack-network-name } 
        security_groups:  { get_input: security-groups } 
        flavor:           { get_input: flavor-name }
        identity_file:    { get_input: identity_file }        
        username: centos
      requirements:  
        - protected_by: security-rules-sodalite 
        - protected_by: security-rules-graphdb

    docker-host:
      type: sodalite.nodes.DockerHost
      requirements:
        - host: sodalite-vm

    docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:  
        name: { get_input: docker-network }
      requirements:
        - host: sodalite-vm 
        - dependency: docker-host    
        
    docker-public-registry:
      type: sodalite.nodes.DockerRegistry
      properties:  
        docker_registry_url: { get_input: docker-public-registry-url } 
      requirements:
        - host: sodalite-vm
        - dependency: docker-host 


    # semantic-reasoner     
    # https://github.com/SODALITE-EU/semantic-reasoner 
    know-db-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: graph-db
        docker_network_name:  { get_property: [ SELF, network, name ] }
        image_name: sodaliteh2020/graph_db
        restart_policy: always
        ports:  ['7200:7200']
        exposed_ports:  ['7200']
        volumes:
          - "/home/centos/graphdb-home:/opt/graphdb/home"   
      requirements:
        - host: docker-host
        - registry: docker-public-registry   
        - network: docker-network      

    semantic-web-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: semantic-web
        docker_network_name:  { get_property: [ SELF, network, name ] }
        image_name: sodaliteh2020/semantic_web
        restart_policy: always
#        env:
#          WAIT_HOSTS: graph-db:7200
#          environment: docker
#          graphdb:  http://graph-db:7200
#          bugPredictorServer:  http://tosca-smells:8080/  
#          ansiblePath: /usr/local/tomcat/webapps/Ansibles/
#          reasonerServer: "http://{{ public_address }}:8080/"
        env: { get_input: reasoner_env }
        ports:  ['8080:8080']
        volumes:
          - "/tmp/tomcat/webapps/Ansibles:/usr/local/tomcat/webapps/Ansibles"   
      requirements:
        - host: docker-host
        - registry: docker-public-registry   
        - network: docker-network     
        - dependency: know-db-container
        - dependency: tosca-smells-container

     
    # defect-prediction      
    # https://github.com/SODALITE-EU/defect-prediction         
    tosca-smells-container:
      type: sodalite.nodes.DockerizedComponent
      properties:
        alias: tosca-smells
        docker_network_name:  { get_property: [ SELF, network, name ] }
        image_name: sodaliteh2020/toscasmells
        restart_policy: always
        env: { get_input: toscasmells_env }
        ports:  ['8082:8080']
        exposed_ports:  ['8080']
      requirements:
        - host: docker-host
        - registry: docker-public-registry  
        - dependency: know-db-container
        - network: docker-network 

